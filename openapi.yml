openapi: 3.0.3
info:
  title: ClassConnect Gateway Service API
  version: 1.0.0
  description: |
    The Gateway reroutes requests to the appropriate microservice (users, education, backoffice).
    For example, `GET /users/<uuid>` will call the users-service with `GET /users/<uuid>` and return its response.

paths:
  /notifications:
    post:
      summary: Sends a push notification to the given user.
      description: |
        Will get the user's preference for push notifications and send one if set to true for the specified topic.
      operationId: notifyUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PushNotification'
      responses:
        '200':
          description: The notification was sent successfully if the user stated to receive notifications for this topic.
        '404':
          description: Didn't find user in users service.
        '500':
          description: Failed to reach users service or Expo failed to send push notification.

  /email/student-enrollment:
    post:
      summary: Sends an email to a given user regarding an enrollment to a certain course.
      description: |
        Will get the user's preference for notifications and send the email if set to true for student enrollments.
      operationId: sendEnrollmentEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EnrollmentEmail'
      responses:
        '200':
          description: The email was sent successfully if the user stated to receive notifications for student enrollments.
        '404':
          description: Didn't find user in users service.
        '500':
          description: Failed to reach users service or failed to send email.
         
  /email/assistant-assignment:
    post:
      summary: Sends an email to a given user regarding an assistant assignment to a certain course.
      description: |
        Will get the user's preference for notifications and send the email if set to true for assistant assignments.
      operationId: sendAssistantAssignmentEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssistantAssignmentEmail'
      responses:
        '200':
          description: The email was sent successfully if the user stated to receive notifications for assistant assignments.
        '404':
          description: Didn't find user in users service.
        '500':
          description: Failed to reach users service or failed to send email.

  /email/rules:
    post:
      summary: Sends an email to all users regarding the new rules and policies of the application.
      description: |
        This endpoint will send an email with the updated rules and policies to all the users in the platform
      operationId: sendRulesEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RulesEmail'
      responses:
        '200':
          description: Send the email successfully.
        '404':
          description: Didn't find user in users service.
        '500':
          description: Failed to reach users service or failed to send email.

  /users/me:
    get:
      summary: Gets a certain user without a given id.
      description: |
        This endpoint uses the token in the Authorization header to obtain the user's id through Firebase.
        Will then proxy the request replacing `me` with the id and pass it along to the users service.
      operationId: userGet
      responses:
        '400':
          description: Failed to fetch the user's information in Firebase.
        '500':
          description: Failed to reach users service.

    patch:
      summary: Patches a certain user without a given id.
      description: |
        This endpoint uses the token in the Authorization header to obtain the user's id through Firebase.
        Will then proxy the request replacing `me` with the id and pass it along to the users service.
      operationId: userPatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserProfile'
      responses:
        '400':
          description: Failed to fetch the user's information in Firebase.
        
  /admin-backend/{path}:
    get:
      summary: Generic proxy route for backoffice backend.
      description: |
        This endpoint proxies requests to downstream services.
        The full path beyond `/admin-backend/{path}/` is captured and used for routing.
        This is a catch-all handler for /admin-backend prefixed endpoints.
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Proxied response

  /admin-backend/users/{uid}/lock-status:
    patch:
      summary: Will block the user in the application through Firebase, so that their requests are invalidated by the auth.
      description: |
        This endpoint catches the request for an admin to block a certain user of the platform.
        It's resolved at gateway level as it has to block the user from both firebase and users service.
      operationId: updateUserLockStatus
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLockStatus'
      responses:
        '200':
          description: Successfuly toggled lock status for a user.
        '404':
          description: The user was not found.
        '500':
          description: Failed to reach firebase or users service.

  /{path}:
    get:
      summary: Generic proxy route.
      description: |
        This endpoint proxies requests to downstream services.
        The full path beyond `/proxy/` is captured and used for routing.
        This is a catch-all handler.
      parameters:
        - name: path
          in: path
          required: true
          schema:
            type: string
            pattern: .*
      responses:
        '200':
          description: Proxied response

components:
  schemas:
    PushNotification:
      type: object
      required:
        - uuid
        - title
        - body
        - topic
      properties:
        uuid:
          type: string
          example: 681293f60d3eebd21ae7dad4
        title:
          type: string
          example: Enrollment succesfull!
        body:
          type: string
          example: You've been successfully enrolled to the course Algorithms Design
        topic:
          type: string
          example: enrollment

    EnrollmentEmail:
      type: object
      required:
        - uuid
        - toName
        - courseName
        - studentEmail
        - topic
      properties:
        uuid:
          type: string
          example: 681293f60d3eebd21ae7dad4
        toName:
          type: string
          example: John
        courseName:
          type: string
          example: Algorithms Design
        studentEmail:
          type: string
          example: john@gmail.com
        topic:
          type: string
          example: enrollment

    AssistantAssignmentEmail:
      type: object
      required:
        - uuid
        - toName
        - professorName
        - courseName
        - studentEmail
        - topic
      properties:
        uuid:
          type: string
          example: 681293f60d3eebd21ae7dad4
        toName:
          type: string
          example: John
        professorName:
          type: string
          example: Johnathan
        courseName:
          type: string
          example: Algorithms Design
        studentEmail:
          type: string
          example: johnathan@gmail.com
        topic:
          type: string
          example: assistant-assignment

    RulesEmail:
      type: object
      required:
        - rules
      properties:
        rules:
          type: array
          items:
            type: object
            properties:
              title:
                type: string
              description:
                type: string
              effective_date:
                type: string
              applicable_conditions:
                type: array
                items:
                  type: string

    UserLockStatus:
      type: object
      required:
        - uid
        - locked
      properties:
        uid:
          type: string
          example: 681293f60d3eebd21ae7dad4      
        locked:
          type: boolean
    
    UpdateUserProfile:
      type: object
      properties:
        name:
          type: string
          example: Updated Name
        email:
          type: string
          format: email
          example: updated.user@gmail.com
        urlProfilePhoto:
          type: string
          format: uri
          example: https://firebasestorage.googleapis.com/v0/new_photo.jpg
        description:
          type: string
          example: "Updated profile description"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
